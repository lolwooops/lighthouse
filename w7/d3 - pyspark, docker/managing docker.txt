The docker system prune command removes all stopped containers, dangling images, and unused networks:
	
	docker system prune


If you want to remove all unused images not just the dangling ones, add the -a (--all) option to the command:

	docker system prune -a

To remove all unused volumes, pass the --volumes option:

	docker system prune --volumes

Docker containers are not automatically removed when you stop them unless you start the container using the --rm flag

To remove one or more Docker containers, use the docker container rm command, followed by the IDs of the containers. You can get a list of all containers by invoking the docker container ls command with the -a option: you want to remove.

	docker container ls -a

Once you know the CONTAINER ID of the containers you want to delete, pass it to the docker container rm command. For example, to remove the first two containers listed in the output above, you would run:

	docker container rm cc3f2ff51cab cd20b396a061

To remove all stopped containers, invoke the docker container prune command:

	docker container prune

If you want to get a list of all non-running (stopped) containers that will be removed with docker container prune, use the following command:

	docker container ls -a --filter status=exited --filter status=created

For example, to remove all images created more than 12 hours ago, you would run:

	docker container prune --filter "until=12h"

To stop all running containers, enter the docker container stop command followed by the containers IDs:

	docker container stop $(docker container ls -aq)

Once all containers are stopped, remove them using the docker container rm command, followed by the containers ID list.

	docker container rm $(docker container ls -aq)

When you download a Docker image, it is kept on the server until you manually remove it.
To remove one or more Docker images, first, you need to find the IDs of the images:

	docker image ls

Once you’ve located the images you want to remove, pass their IMAGE ID to the docker image rm command. For example, to remove the first two images listed in the output above, you would run:

	docker image rm 75835a67d134 2a4cca5ac898

A dangling image is an image that is not tagged and is not used by any container. To remove dangling images, type:

	docker image prune

To remove all images that are not referenced by any existing container, not just the dangling ones, use the prune command with the -a option:

	docker image prune -a

With the docker image prune command, you can also remove images based on a particular condition with the --filter option.
At the time of the writing of this article, the currently supported filters are until and label. You can use more than one filter.

For example, to remove all images that are created more than seven days (168 hours) ago, you would run:

	docker image prune -a --filter "until=168h"

To remove one or more Docker volumes, run the docker volume ls command to find the ID of the volumes you want to remove.
	
	docker volume ls

Once you’ve found the VOLUME NAME of the volumes you want to remove, pass them to the docker volume rm command. For example, to remove the first volume listed in the output above, run:

	docker volume rm 4e12af8913af888ba67243dec78419bf18adddc3c7a4b2345754b6db64293163

To remove all unused volumes, run the docker image prune command:
	
	docker volume prune

Once you’ve located the networks you want to remove, pass their NETWORK ID to the docker network rm command. For example, to remove the network with the name my-bridge-network, run:

	docker network rm c520032c3d31

Use the docker network prune command to remove all unused networks.

	docker network prune

For example, to remove all networks that are created more than 12 hours ago, run:

	docker network prune -a --filter "until=12h"
